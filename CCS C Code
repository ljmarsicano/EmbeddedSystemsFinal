#include <msp430g2553.h>
volatile long tempRaw,lightRaw,tempExRaw;
char result[100];
volatile long sample[100];

void ConfigureAdc_temp();
void ConfigureAdc_light();
void ConfigureAdc_tempEx();
void reset();

void uart_init(void);
void ConfigClocks_wdt(void);
void ConfigClocks_uart(void);
void strreverse(char* begin, char* end);
void itoa(int value, char* str, int base);
void port_init();

void main(void)
{
    float uarttime;

    port_init();
    ConfigClocks_wdt();
    ConfigClocks_uart();
    uart_init();

    P1DIR |= BIT4 | BIT5 | BIT6;
    P1OUT = 0x00;
    _delay_cycles(5);

    //_enable_interrupts();
    while(1){
        //Get the temp
        reset();
        ConfigureAdc_temp();
        _delay_cycles(100);
        tempRaw = ADC10MEM;

        //Get the light level
        reset();
        ConfigureAdc_light();
        _delay_cycles(100);
        lightRaw = ADC10MEM;

        //Get the extra temp
        reset();
        ConfigureAdc_tempEx();
        _delay_cycles(100);
        tempExRaw = ADC10MEM;

        //Blinking LED Status
        if (tempRaw > 370)
        {
            _enable_interrupts();
        }
        else
        {
            _disable_interrupts();
        }

        //Blinking LED STATUS
        if (tempExRaw >= 735)
        {
            P1OUT |= BIT6;
        }
        else
        {
            P1OUT &= ~BIT6;
        }

        //GREEN LED STATUS
        if (lightRaw > 200)
        {
            P1OUT &= ~BIT4;
        }
        else
        {
            P1OUT |= BIT4;
        }

        if (uarttime == 10000)
        {
            ADC10CTL0 &= ~ADC10IFG;
            itoa(((tempExRaw* 48724 - 30634388) >> 16),result,10);
            int acount = 0;
            while(result[acount]!='\0')
            {
                while((IFG2 & UCA0TXIFG)==0);
                UCA0TXBUF = result[acount++];
            }
            uarttime = 0;
        }
        else
        {
            uarttime++;
        }

    }
}

//Resets ADC
void reset(){
    ADC10CTL0 &= ~ADC10IFG;//CLEAR FLAG
    ADC10MEM=0x00000000;
    ADC10AE0=0x00;
    ADC10CTL0=0x0000;
    ADC10CTL1=0x0000;
}

// Configure ADC Temperature
void ConfigureAdc_temp(){
     ADC10CTL1 = INCH_7 + ADC10DIV_0 + CONSEQ_2;
     ADC10CTL0 = SREF_1 | ADC10SHT_3 | REFON | ADC10ON ;  //Vref+, Vss, 64 ATD clocks per sample, internal references, turn ADCON
     ADC10CTL0 |= ENC + ADC10SC +MSC;
}

//Configure ADC Extra Temperature
void ConfigureAdc_tempEx(){
     ADC10CTL1 = INCH_10 + ADC10DIV_0 + CONSEQ_2;
     ADC10CTL0 = SREF_1 | ADC10SHT_3 | REFON | ADC10ON ;  //Vref+, Vss, 64 ATD clocks per sample, internal references, turn ADCON
     ADC10CTL0 |= ENC + ADC10SC +MSC;
}

//Configure ADC Light
void ConfigureAdc_light(){
    ADC10CTL1 = INCH_3 + ADC10DIV_0 + CONSEQ_2;
    ADC10CTL0 = SREF_1 | ADC10SHT_3 | REFON | ADC10ON ;  //Vref+, Vss, 64 ATD clocks per sample, internal references, turn ADCON
    ADC10CTL0 |= ENC + ADC10SC +MSC;
}

//Configures the clock for the watchdog timer
void ConfigClocks_wdt(void){
    BCSCTL2 |= DIVS_3;
    WDTCTL = WDT_MDLY_32;
    IE1 |= WDTIE;
}

//Configures the clocks for the UART communication
void ConfigClocks_uart(void)
 {
  BCSCTL1 = CALBC1_1MHZ;                     // Set range
  DCOCTL = CALDCO_1MHZ;                      // Set DCO step + modulation
  BCSCTL3 |= LFXT1S_2;                       // LFXT1 = VLO
  IFG1 &= ~OFIFG;                            // Clear OSCFault flag
  BCSCTL2 = 0;                               // MCLK = DCO = SMCLK
}


//Initializes the UART
void uart_init(void){
    UCA0CTL1 |= UCSWRST;                     //Disable the UART state machine
    UCA0CTL1 |= UCSSEL_3;                    //Select SMCLK as the baud rate generator source
    UCA0BR1 =0;
    UCA0BR0 = 104;                           //Produce a 9,600 Baud UART rate
    UCA0MCTL = 0x02;                         //Chooa propriately from Table 15-4 in User Guide
    UCA0CTL1 &= ~UCSWRST;                    //Enable the UART state naching
    IE2 |= UCA0RXIE;                         //Enable the UART receiver Interrupt
}

void strreverse(char* begin, char* end)      // Function to reverse the order of the ASCII char array elements
{
    char aux;
    while(end>begin)
        aux=*end, *end--=*begin, *begin++=aux;
}

void itoa(int value, char* str, int base) {  //Function to convert the signed int to an ASCII char array

    static char num[] = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* wstr=str;
    int sign;

    // Validate that base is between 2 and 35 (inlcusive)
    if (base<2 || base>35){
        *wstr='\0';
        return;
    }

    // Get magnitude and th value
    sign=value;
    if (sign < 0)
        value = -value;

    do                      // Perform interger-to-string conversion.
        *wstr++ = num[value%base]; //create the next number in converse by taking the modolus
    while(value/=base);     // stop when you get  a 0 for the quotient

    if(sign<0)              //attch sign character, if needed
        *wstr++='-';
    *wstr='\0';             //Attach a null character at end of char array. The string is in revers order at this point
    strreverse(str,wstr-1); // Reverse string

}

void port_init(){
    P1SEL |= BIT1 + BIT2;            // select non-GPIO  usage for Pins 1 and 2
    P1SEL2 |= BIT1 + BIT2;           // Select UART usage of Pins 1 and 2
}

#pragma vector = WDT_VECTOR
__interrupt void WDT(void)
{
P1OUT ^= BIT5;
}
